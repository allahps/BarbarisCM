from aiogram.filters import ChatMemberUpdatedFilter, JOIN_TRANSITION
from aiogram.types.link_preview_options import LinkPreviewOptions
from aiogram.types.chat_member_updated import ChatMemberUpdated
from aiogram.enums.parse_mode import ParseMode
from aiogram import Bot, types
from aiogram import types
import database as db

greeting = """‚úÖ –Ø —Ç–∞–∫ —Ä–∞–¥, —á—Ç–æ –º–µ–Ω—è –¥–æ–±–∞–≤–∏–ª–∏. –ü–æ–∫–∞ —è –ø—Ä–∏–∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.
‚öôÔ∏è –°–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ <a href="https://teletype.in/@iris_cm/commands">–Ω–∞—à–µ–π —Å—Ç–∞—Ç—å–µ</a>

‚ö™Ô∏è –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç —Å–ø–∞–º–∞ –≤ —á–∞—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –≤ 30 —á–µ–ª–æ–≤–µ–∫.
‚Äî –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ª–∏–º–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ "–∏–Ω–≤–∞–π—Ç—ã {—á–∏—Å–ª–æ}", –≥–¥–µ —á–∏—Å–ª–æ –º–æ–∂–µ—Ç –±—ã—Ç—å 0, —ç—Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç –ª–∏–º–∏—Ç

–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ <a href="https://t.me/barbaris_cm_chat">–Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç</a>"""

ranks = ["–£—á–∞—Å—Ç–Ω–∏–∫", "–ú–ª–∞–¥—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–ú–ª–∞–¥—à–∏–π –∞–¥–º–∏–Ω", "–°—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω", "–°–æ–∑–¥–∞—Ç–µ–ª—å"]


async def greet(event:ChatMemberUpdated, bot:Bot):
    admins = await event.chat.get_administrators()
    for admin in admins:
        if admin.status == "creator":
            db.setAdminValue(event.chat.id, admin.user.id, 5)
    await bot.send_message(chat_id=event.chat.id, text=greeting, parse_mode=ParseMode.HTML, link_preview_options=LinkPreviewOptions(is_disabled=True))


async def onMessage(msg:types.Message):
    db.checkUser(msg.chat.id, msg.from_user.id)

# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–≥–æ-–ª–∏–±–æ
def checkAccess(chatID:int, userID:int, cmd:str, levelNeeded:int) -> str:
    if db.getAdminValue(chatID, userID) >= levelNeeded:
        return None
    else:
        return f"üìù –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–Ω–≥–∞ {ranks[levelNeeded]} ({levelNeeded})\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –ö–æ–º–∞–Ω–¥–∞ ¬´{cmd}¬ª"
    
# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–≥–æ-–ª–∏–±–æ
def parseUsername(args:list[str]) -> str:
    for elem in args:
        if "@" in elem or "t.me" in elem:
            return elem.replace("@", "").replace("https://t.me/", "").replace(".t.me", "")
    return None

def parseID(args:list[str]) -> id:
    for elem in args:
        if len(elem) in (9, 10) and elem.isdigit():
            return int(elem)
    return None